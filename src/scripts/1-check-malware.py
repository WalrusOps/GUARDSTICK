import os
import subprocess
import json
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress

# Define base and report directories
ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../"))  # Root directory
SRC_DIR = os.path.join(ROOT_DIR, "src")                                        # Source directory
DATA_DIR = os.path.join(SRC_DIR, "data")                                       # Data directory
REPORTS_DIR = os.path.join(DATA_DIR, "log_reports")                            # Log reports directory
os.makedirs(REPORTS_DIR, exist_ok=True)

# Define a human-readable report filename with a timestamp
timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
report_filename = f"Application_Security_Report_{timestamp}.json"
JSON_LOG_FILE = os.path.join(REPORTS_DIR, report_filename)

# Initialize counters and data structure
accepted_count = 0
rejected_count = 0
current_count = 0
applications_data = []

# Initialize rich console
console = Console()

def explain_process():
    """Display an explanation panel for the script's purpose."""
    intro_text = "[bold magenta]🔍 Malicious Software Check 🔍[/bold magenta]"
    description = (
        "This script analyzes applications in standard macOS application directories "
        "to determine their security status.\n\n"
        "It verifies whether applications are trusted by macOS (signed by identified developers) "
        "or untrusted (possibly unsigned or unrecognized).\n\n"
        "Results are saved in the following JSON file:\n"
        f"- [cyan]{os.path.basename(JSON_LOG_FILE)}[/cyan]"
    )
    console.print(Panel(intro_text, border_style="magenta"))
    console.print(description, style="dim")

def check_signed_apps():
    """Check each application in /Applications and ~/Applications."""
    global accepted_count, rejected_count, current_count, applications_data

    app_dirs = ["/Applications", os.path.expanduser("~/Applications")]
    total_apps = sum(len(os.listdir(d)) for d in app_dirs if os.path.exists(d))

    table = Table(title="Application Status", show_header=True, header_style="bold blue")
    table.add_column("Application", justify="left")
    table.add_column("Status", justify="center")

    with Progress() as progress:
        task = progress.add_task("[cyan]Checking applications...", total=total_apps)

        for app_dir in app_dirs:
            if not os.path.exists(app_dir):
                continue
            for app_name in os.listdir(app_dir):
                app_path = os.path.join(app_dir, app_name)
                if os.path.isdir(app_path) and app_name.endswith(".app"):
                    current_count += 1
                    result = subprocess.run(
                        ["spctl", "--assess", "--type", "exec", app_path],
                        capture_output=True, text=True
                    )

                    app_entry = {
                        "application_name": app_name,
                        "application_path": app_path,
                        "status": "",
                        "notes": ""
                    }

                    # Determine app status and log appropriately
                    if "accepted" in result.stdout:
                        app_entry["status"] = "trusted"
                        accepted_count += 1
                        table.add_row(app_name, "[green]Trusted[/green]")
                    elif "rejected" in result.stdout:
                        app_entry["status"] = "untrusted"
                        rejected_count += 1
                        table.add_row(app_name, "[red]Untrusted[/red]")
                    else:
                        app_entry["status"] = "unknown"
                        app_entry["notes"] = result.stdout.strip() or result.stderr.strip()
                        table.add_row(app_name, "[yellow]Status Unknown[/yellow]")

                    applications_data.append(app_entry)

                    # Update progress bar
                    progress.update(task, advance=1)

    console.print(table)

    # Save the data to a JSON file
    save_json_log(applications_data)

def save_json_log(data):
    """Save the applications data to a JSON file in an LLM-friendly format."""
    with open(JSON_LOG_FILE, 'w', encoding='utf-8') as json_file:
        json.dump(data, json_file, indent=4, ensure_ascii=False)
    console.print(f"\n[bold green]JSON report saved to:[/bold green] {JSON_LOG_FILE}")

def summary():
    """Display a summary panel of the scan results."""
    summary_panel = Panel(
        f"[bold green]Trusted Applications:[/bold green] {accepted_count}\n"
        f"[bold red]Untrusted Applications:[/bold red] {rejected_count}\n",
        title="Scan Summary",
        border_style="blue"
    )
    console.print(summary_panel)

    # Detailed information on untrusted apps if any
    if rejected_count > 0:
        console.print(Panel("[bold red]Untrusted Applications Detected:[/bold red]", border_style="red"))
        untrusted_apps = [app for app in applications_data if app["status"] == "untrusted"]
        for app in untrusted_apps:
            console.print(f"- {app['application_name']}", style="red")
    else:
        console.print("[green]No untrusted applications detected.[/green]")

def main():
    explain_process()
    check_signed_apps()
    summary()

if __name__ == "__main__":
    main()